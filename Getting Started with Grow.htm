<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Mono:wght@500;800&display=swap" rel="stylesheet">

    <style>
      /*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */html,body,p,ol,ul,li,dl,dt,dd,blockquote,figure,fieldset,legend,textarea,pre,iframe,hr,h1,h2,h3,h4,h5,h6{margin:0;padding:0}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal}ul{list-style:none}button,input,select{margin:0}html{box-sizing:border-box}*,*::before,*::after{box-sizing:inherit}img,video{height:auto;max-width:100%}iframe{border:0}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}
    </style>

    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/a11y-dark.min.css" media="print" onload="this.media='all'">
    <link rel="shortcut icon" href="https://learn.pimoroni.com/static/favicon.png" type="image/x-icon" />

    <title>Getting Started with Grow</title>
    <meta name="description" content="Learn how to assemble Grow and start monitoring your plants &ndash; Pimoroni Learning Portal">

    <link rel="stylesheet" href="https://learn.pimoroni.com/static/style.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <script>
      function selectSection(fragment) {
        $("#article_container nav a").removeClass("active")
        $("#article_container nav a[href$=\"" + fragment + "\"]").addClass("active")
      }

      $(() => {
        $("#article_container nav a").click((e) => {
          selectSection($(e.target).attr("href"))
        })

        if(!window.location.hash) {
          $("#article_container nav a").first().next().trigger("click")
        }else{
          selectSection(window.location.hash)
        }
      })

      // localStorage shorthand
      set = (k, v) => {localStorage.setItem(k, v)}
      get = (k, d = null) => {return localStorage.getItem(k) || d}

      // document.write shorthand
      write = (v) => {document.write(v)}

      // url parameter shorthand
      const _usp = new URLSearchParams(window.location.search)
      urlGet = (k, d = null) => {return _usp.get(k) || d}

      // logging helpers
      debugging = true
      debug = (...args) => {if(debugging) {console.log("DEBUG:", ...args)}}
      error = (...args) => {if(debugging) {console.error("ERROR:", ...args)}}
      warn = (...args) => {if(debugging) {console.warn("WARNING:", ...args)}}
      todo = (...args) => {if(debugging) {console.warn("TODO:", ...args)}}

    </script>
    <style>

    </style>
  </head>

  <body>

    <svg width="794" height="0" style="position: absolute;">
      <defs>
        <linearGradient id="brand_gradient" x1="0%" y1="0%" x2="1000%" y2="0%" gradientUnits="userSpaceOnUse" spreadMethod="repeat">
          <stop offset="0%" stop-color="hsl(5deg 79% 54%)" />
          <stop offset="7%" stop-color="hsl(21deg 88% 53%)" />
          <stop offset="13%" stop-color="hsl(34deg 93% 50%)" />
          <stop offset="20%" stop-color="hsl(47deg 100% 43%)" />
          <stop offset="26%" stop-color="hsl(76deg 61% 45%)" />
          <stop offset="33%" stop-color="hsl(137deg 48% 49%)" />
          <stop offset="40%" stop-color="hsl(168deg 100% 36%)" />
          <stop offset="46%" stop-color="hsl(179deg 100% 36%)" />
          <stop offset="52%" stop-color="hsl(187deg 76% 45%)" />
          <stop offset="58%" stop-color="hsl(198deg 100% 46%)" />
          <stop offset="64%" stop-color="hsl(237deg 76% 71%)" />
          <stop offset="70%" stop-color="hsl(297deg 51% 59%)" />
          <stop offset="76%" stop-color="hsl(316deg 66% 65%)" />
          <stop offset="82%" stop-color="hsl(329deg 85% 72%)" />
          <stop offset="88%" stop-color="hsl(341deg 96% 70%)" />
          <stop offset="94%" stop-color="hsl(351deg 92% 64%)" />
          <stop offset="100%" stop-color="hsl(5deg 79% 54%)" />
        </linearGradient>
      </defs>
    </svg>
    <header>
      <div></div>
      <div></div>
    </header>
    <header style="box-shadow: inset 0 12px 10px -10px rgba(0, 0, 0, 0.2);">
      <div></div>

      <div></div>
    </header>

    <main>
      <div></div>
      <div>
        <div id="search_results"></div>
        <div id="content">
<script>
  var primaryColour = "rgb(230,60,46)"
</script>

<div id="article">

  <div id="toc">
    <nav>
      <ul>
        <li><a href="#introduction">Introduction</a></li>
          <li><a href="#what-youll-need">What you’ll need</a>
          </li>
          <li><a href="#how-to-attach-the-grow-hat-to-your-pi">How to attach the Grow HAT to your Pi</a>
          </li>
          <li><a href="#connecting-the-moisture-sensors">Connecting the moisture sensors</a>
          </li>
          <li><a href="#installing-the-grow-software">Installing the Grow software</a>
          </li>
          <li><a href="#using-the-monitor">Using the monitor</a>
          </li>
          <li><a href="#starting-and-stopping-the-service">Starting and stopping the service</a>
          </li>
          <li><a href="#how-the-moisture-sensors-work">How the moisture sensors work</a>
          </li>
          <li><a href="#calibration-important">Calibration (important!)</a>
          </li>
          <li><a href="#next-steps">Next steps</a>
          </li>
      </ul>
    </nav>
  </div>

  <article>
    <div id="body">
      <h1 id="introduction"><span> Getting Started with Grow</span></h1>
      <p> This is not the original set of instructions, but rather a modified version for the DTIE module at Constructor University. You can find <a href="https://learn.pimoroni.com/article/assembling-grow">the original on the Pimoroni website</a>. </p>
      <p>Automatic, systematic and hydromatic, <a target='_blank' href='https://shop.pimoroni.com/products/grow' title='None'>Grow</a> is a smart modular monitoring system designed to help you take the best possible care of your plants. It will tell you how well they're hydrated, attract your attention when they need water and, if you want to go a step further, even give them water!</p>
<p><img width='2048' height='1367' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001420.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001420.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001420.jpg?width=800' alt='Grow HAT Minis attached to a Pi Zero and a Pi 4, and three Grow moisture sensors' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001420.jpg?width=1200'></p>
<p>In this tutorial, we’ll show you how everything fits together and how get started monitoring your plants using our monitor application, as well as explaining a little bit about how Grow works. We’ll be starting from the absolute basics, so if you’re already familiar with how to setup a Raspberry Pi and install software for HATs you might want to skip the first few sections.</p>
<h2 id='what-youll-need'>What you’ll need</h2><ul>
<li><p><strong>One of our Grow kits</strong>! The <a target='_blank' href='https://shop.pimoroni.com/products/grow?variant=32208365486163' title='None'>base kit of mini HAT and moisture sensors</a> will do if you’d like to monitor your existing plants, or you could pick up one of our <a target='_blank' href='https://shop.pimoroni.com/products/grow?variant=32208365551699' title='None'>chilli</a> or <a target='_blank' href='https://shop.pimoroni.com/products/grow?variant=32208365518931' title='None'>herb</a> starter kits if you’d like to grow your own from scratch.</p>
</li>
<li><p><strong>A Raspberry Pi</strong>! We’ll be using a <a target='_blank' href='https://shop.pimoroni.com/products/raspberry-pi-zero-wh-with-pre-soldered-header' title='None'>Pi Zero WH</a> in this tutorial as we’ve designed the Grow HAT Mini to fit nicely on top of the Zero footprint, and it has a pre-soldered header so you won’t need to do any soldering yourself. Grow HAT Mini will also work with other Raspberry Pis as long as they have a 40 pin GPIO header (it’s only the very early ones that don’t).</p>
</li>
<li><p><strong>Power supply for Pi</strong>. You’ll need a way of powering your Pi - for a Zero we’d recommend <a target='_blank' href='https://shop.pimoroni.com/products/raspberry-pi-universal-power-supply' title='None'>this USB micro-B power supply</a>.</p>
</li>
<li><p><strong>MicroSD card</strong>, 8GB or greater. We sell ones pre-installed with Raspberry Pi OS <a target='_blank' href='https://shop.pimoroni.com/products/noobs-32gb-microsd-card-3-1?variant=31703694245971' title='None'>here</a>, which will save you a step later on.</p>
</li>
<li><p><strong>Standoffs</strong> (Optional) To be extra sure that your Grow Mini HAT stays firmly attached to your Pi Zero, you could use a couple of 10mm <a target='_blank' href='https://shop.pimoroni.com/products/brass-m2-5-standoffs-for-pi-hats-black-plated-pack-of-2' title='None'><strong>M2.5 standoffs</strong></a> to secure the board to your Pi.</p>
</li>
<li><strong>Keyboard, mouse, display cables.</strong> We’ll be assuming that you’ll be plugging your Pi into a HDMI monitor and keyboard as that’s the easiest way to set everything up (though it’s also possible to set it up ‘headlessly’ from another computer - we’ve got a tutorial for how to do that <a target='_blank' href='https://learn.pimoroni.com/tutorial/sandyj/setting-up-a-headless-pi' title='None'>here</a>). The Pi Zero WH has a mini HDMI display port, so you'll need either a <a target='_blank' href='https://shop.pimoroni.com/products/mini-hdmi-cable' title='None'>mini HDMI cable</a> or a standard HDMI cable and a mini HDMI adaptor (like the one in our <a target='_blank' href='https://shop.pimoroni.com/products/zero-adaptor-kit' title='None'>Zero adaptor kit</a>). To plug in a USB keyboard, you'll likely need a micro USB adaptor - there's one of those in our <a target='_blank' href='https://shop.pimoroni.com/products/zero-adaptor-kit' title='None'>Zero adaptor kit</a> too!</li>
</ul>
<h2 id='how-to-attach-the-grow-hat-to-your-pi'>How to attach the Grow HAT to your Pi</h2><p>To attach Grow HAT Mini to your Pi, push the female header on Grow down onto the male header on the Raspberry Pi as far as it will go, making sure that you've lined all of the pins up correctly and that it’s the right way round. Powering it up when plugged in to the wrong pins could damage the Pi or the Grow HAT Mini.</p>
<p><img width='2048' height='1367' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001456.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001456.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001456.jpg?width=800' alt='A Raspberry Pi Zero with a Grow HAT Mini attached' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001456.jpg?width=1200'></p>
<p>You can unpeel the protective plastic film from the screen using the green tab, or you can leave it on to protect it from errant bits of soil if you prefer.</p>
<h2 id='connecting-the-moisture-sensors'>Connecting the moisture sensors</h2><p>The moisture sensors come in sets of three, still attached to their sprues. Side cutters are the best way to separate them if you have them, but snapping them by hand along the perforation line will work too. You can tidy up the rough edge with sandpaper or an emery board if you want.</p>
<p><img width='2048' height='1367' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001566.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001566.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001566.jpg?width=800' alt='Removing the moisture sensors from their sprues' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001566.jpg?width=1200'></p>
<p>The moisture sensor cables have three wires and connect to the three pin ports S1, S2 and S3 <strong>on top of</strong> the Grow HAT Mini - the connectors will only go in one way round, so if you’re having trouble plugging them in try rotating the connector and trying it the other way round rather than forcing them. If you ever need to unplug these little JST connectors, we’d recommend holding onto the moulded plastic connector and gently wiggling - don’t pull them out by the wires, as they can sometimes be a bit delicate.</p>
<p><img width='2048' height='1367' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001504.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001504.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001504.jpg?width=800' alt='Plugging the moisture sensor cables into the upper set of connectors' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1001504.jpg?width=1200'></p>
<p>The connectors on the bottom of the HAT (P1, P2 and P3) are squarer and only have two pins. They’re for plugging in 5v devices like pumps - we’ll take a look at those in later tutorials!</p>
<p>For the capacitive moisture sensors to work best as much of them will need to be surrounded by soil as possible, so it’s best to position the sensors a little way in from the edge of the pot and push them in as far as they can go. The Under/Ground line should be at or above the level of the soil, to avoid the components at the top of the sensors coming into contact with water.</p>
<h2 id='installing-the-grow-software'>Installing the Grow software</h2><p>For this part of the tutorial, you'll need a micro-SD card that's been set up with the Raspberry Pi OS operating system, and to be connected to Wi-Fi. If you’re flashing the SD card yourself, we’d recommend using the Raspberry Pi Imager tool, which is available for Windows, Mac and Linux - you can download it <a target='_blank' href='https://www.raspberrypi.org/downloads/' title='None'>here</a> and there are detailed instructions <a target='_blank' href='https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/2' title='None'>here</a> if you need them.</p>
<p><img width='682' height='466' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/raspberrypiimager.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/raspberrypiimager.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/raspberrypiimager.jpg?width=800' alt='Screenshot of Raspberry Pi imager program' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/raspberrypiimager.jpg?width=1200'></p>
<p>For our workshop, please use the <i><b>legacy</b></i> 32-bit desktop version of Raspberry Pi OS image for the Raspberry Pi Zero 2 W. It includes all the software dependencies that you'll need. You can skip the software updates as it will work fine without them. </p>
<p>Once Raspberry Pi OS is booted, you can configure wifi through the menu that appears on first boot or by typing <code>sudo raspi-config</code> in the terminal - the wifi settings are under Network Options&gt;Wireless LAN and you can navigate with the arrow keys and enter. We'd recommend starting with a fresh install of Raspberry Pi OS if you can, but if you you’re using an older image we’d recommend that you run <code>sudo apt update</code> and <code>sudo apt upgrade</code> in the terminal to get everything up to date.</p>
<p>To download and install the Grow software open a terminal (press control-alt-t or find it in the Raspberry Pi menu) and then type the following and press enter.</p>
<p><code>curl -sSL https://get.pimoroni.com/grow | bash</code></p>
<p>The installer will download the other software dependencies it needs to work, make some changes to your config.txt file that let your Pi interface with Grow’s hardware and then ask whether you’d like to install the examples - say yes! It will also ask you if you’d like to install the plant monitor as a service - if you answer yes to this it will make the monitor start automatically when the Pi is turned on, which means you don't need to permanently have your display and keyboard plugged in!</p>
<p>Once everything’s installed, type Y to reboot (or <code>sudo reboot</code> ) to reboot your Pi and apply the config changes.</p>
<p>If you're having trouble finding the | (pipe) symbol in the middle of the install command, we made <a target='_blank' href='https://youtu.be/xE6Ox2tB3i8' title='None'>a video on where it might be hiding!</a> If you've found it on your keyboard, but it's coming out as a different symbol you might need to change your keyboard layout to US (<code>sudo raspi-config</code> then  Localisation Options &gt; Change Keyboard Layout )</p>
<h2 id='using-the-monitor'>Using the monitor</h2><p>Once you've rebooted, if everything's gone well you should have a screen that looks something like this (though your lines and bars are likely to be in different places!)</p>
<p><img width='1449' height='1080' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643.jpg?width=800' alt='Main screen of Grow HAT Mini UI' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643.jpg?width=1200'></p>
<p>You’ll see three bars that correspond to your three moisture sensor channels, the colour and height will show you how hydrated each of your pots is, and the black line will show you at what level the alarm will sound. The button next to the little bell will mute the alarm if it’s going off, the alarm will also auto-mute if the light sensor detects it’s dark (so it shouldn’t chirp away at night!)
The &gt; (A button) at the top left will cycle through the channels and show you more information about each one, as well as a little graph showing the moisture levels over time.</p>
<p><img width='1449' height='1080' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_1.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_1.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_1.jpg?width=800' alt='Channel view of Grow HAT Mini UI' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_1.jpg?width=1200'></p>
<p>The % is the current moisture level of your pot, or saturation. The settings button (X button) within the channel menu will take you to a screen where you can alter the moisture level at which the alarm is triggered, or disable the channel altogether. You can also alter the wet and dry points using this screen - more on how those work in the calibration section below!</p>
<p><img width='1449' height='1080' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_2.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_2.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_2.jpg?width=800' alt='Channel settings of Grow HAT Mini UI' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_2.jpg?width=1200'></p>
<p>From the main screen with the three bars, pressing the settings button (X button) will take you to a screen that will let you change global settings, like disabling the alarm and changing up the beep sound.</p>
<p><img width='1449' height='1080' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_3.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_3.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_3.jpg?width=800' alt='Global settings of Grow HAT Mini UI' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_3.jpg?width=1200'></p>
<p>Any of the settings that you change in using the menus in the monitor will be saved in a file on your Pi, which will look something like this:</p>
<p><img width='990' height='576' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/settings.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/settings.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/settings.jpg?width=800' alt='Screenshot of settings file in Nano text editor' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/settings.jpg?width=1200'></p>
<h2 id='starting-and-stopping-the-service'>Starting and stopping the service</h2><p>If you ever need to stop the monitor from running in the background, you can do that with:</p>
<p><code>sudo systemctl stop grow-monitor.service</code></p>
<p>If you want to permanently disable it, you can type in the terminal:</p>
<p><code>sudo systemctl stop grow-monitor.service</code></p>
<p><code>sudo systemctl disable grow-monitor.service</code></p>
<p>Or to re-enable it:</p>
<p><code>sudo systemctl enable grow-monitor.service</code></p>
<p><code>sudo systemctl start grow-monitor.service</code></p>
<p>If you’re running the monitor as a service and want to edit your settings file directly you can do that with:</p>
<p><code>cd /etc/default</code></p>
<p><code>sudo nano grow</code></p>
<p>(and ctrl-X to exit Nano when you're done editing). It's a good idea to <code>stop</code> the service before you start editing the settings file, and <code>start</code> it again afterwards.</p>
<h2 id='how-the-moisture-sensors-work'>How the moisture sensors work</h2><p>Grow's capacitive moisture sensors work using <a target='_blank' href='https://en.wikipedia.org/wiki/Pulse-frequency_modulation' title='None'>Pulse-Frequency Modulation</a>  - they report the moisture level by sending out a regular pattern of on-off electrical pulses, with varying frequency. If you looked at the pattern of pulses with an oscilloscope, you would see a square wave like this:</p>
<p><img width='2087' height='1565' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/waves.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/waves.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/waves.jpg?width=800' alt='Diagram showing a high and low frequency square wave' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/waves.jpg?width=1200'></p>
<p>The Pi (via Grow HAT Mini) interprets the frequency of the pulses as a Hz value between about 0 and 30. A smaller number is wetter, and a larger number is drier.</p>
<h2 id='calibration-important'>Calibration (important!)</h2><p>The Hz values that Grow’s sensors report are relative rather than absolute moisture readings, and are likely to vary depending on soil type, pot size, sensor position and ambient conditions. We’ve included some default values for ‘wet points’ and ‘dry points’ - but you’ll likely get better results if you calibrate the sensors by taking your own base readings. Setting your own wet points and dry points will also mean you can tailor your conditions to different types of plants - a cactus will likely have different opinions about what it considers to be ideal soil conditions to a basil seed!</p>
<p>We’d recommend letting your soil dry out to the point where you think it really needs watering, and then setting the ‘dry point’ reading in the channel settings to match. You can then water it to the desired level, and then set the ‘wet point’ reading. You’ve now got an upper and lower limit of what Grow considers to be acceptable soil conditions!</p>
<p><img width='1449' height='1080' srcset='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_4.jpg?width=800, https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_4.jpg?width=1024 2x' src='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_4.jpg?width=800' alt='How to set Wet Point on Grow Hat Mini' title='None' data-hires='https://cdn.learn.pimoroni.com/article/assembling-grow/assets/P1010643_4.jpg?width=1200'></p>
<p>In the channel settings you can also change the % at which the alarm tells you it’s time for watering to happen - if you want to wait until everything’s at the minimum acceptable moisture level set your alarm level to 0%, or set it at 20% or 40% if you want a bit of a heads up before everything dries up.</p>
<h2 id='next-steps'>Next steps</h2><p>We hope that gets you started monitoring your plants with Grow - tweet us <a target='_blank' href='https://twitter.com/pimoroni' title='None'>@pimoroni</a> and let us know what you’ve been planting! We’ve got another tutorial planned to show you how to take your Grow setup to the next level by incorporating pumps and auto-watering, so keep an eye out for that.</p>

    </div>
    <div>
      <strong>That's all folks!</strong>
      <br><br>
      Search above to find more great tutorials and guides.
    </div>
  </article>

  <div id="metadata">
    <aside>
      <div id="hero" style="background-image: url('https://cdn.learn.pimoroni.com/article/assembling-grow/assets/hero.png?width=600')"></div>

      <div id="details">
        <h1>Getting Started with Grow</h1>
        <address>by Hel Gibbons</address>
        <p>Learn how to assemble Grow and start monitoring your plants</p>

        <div>
          <div>Published</div><div>September 21, 2020</div>
          <div>Reading time</div><div>10 minutes</div>
          <div>Difficulty</div><div>Easy</div>

        </div>
      </div>

      <div id="cart">
        <h2>To complete this project you will need...</h2>

        <ul>
          <li>
            <a target="_blank" href="https://shop.pimoroni.com/products/grow" class="image" style="background-image: url('https://cdn.shopify.com/s/files/1/0174/1800/products/Grow_64x64.jpg?v=1626865483');">
            </a>
            <div>

                <select>
                    <option class="" data-variant-id="32208365486163" data-image="https://cdn.shopify.com/s/files/1/0174/1800/products/Grow_64x64.jpg?v=1626865483" data-in-stock="true">Grow
                        &mdash; Grow Kit

                      
                    </option>
                    <option class="out-of-stock" data-variant-id="32208365551699" data-image="https://cdn.shopify.com/s/files/1/0174/1800/products/chillis_64x64.jpg?v=1619797009" data-in-stock="false">Grow
                        &mdash; Grow Chilli Kit

                      
                    </option>
                    <option class="out-of-stock" data-variant-id="32208365518931" data-image="https://cdn.shopify.com/s/files/1/0174/1800/products/herbs_64x64.jpg?v=1619797009" data-in-stock="false">Grow
                        &mdash; Grow Herb Kit

                      
                    </option>
                </select>
                <br>

            </div>
            <div>
              <div class="add-to-cart ">
                <form action="https://shop.pimoroni.com/cart/add" method="post">
                  <input type="hidden" name="id" value="32208365518931" />
                  <input type="hidden" name="return_to" value="https://learn.pimoroni.com/article/assembling-grow" />
                  <button title="Add to cart">+</button>
                </form>
              </div>
              <div class="out-of-stock hide">
                <span>Out of stock</span>
                <a target="_blank" href="https://shop.pimoroni.com/products/grow">Notify me</a>
              </div>
              <div class="in-cart">
                <span>In your cart</span>
                <a href="#">Remove</a>
              </div>
            </div>
          </li>
        </ul>
<!--

        <a href="https://shop.pimoroni.com/cart">Checkout Now</a>-->
      </div>
    </aside>
  </div>

  <div id="product_popover">
    <div style="background-image: url('https://cdn.shopify.com/s/files/1/0174/1800/products/plasma-2040-square.jpg?v=1629988129');"></div>
    <h1>Plasma 2040</h1>
    <p>Swathe everything in rainbows with this all-in-one, USB-C powered controller for WS2812/Neopixel and APA102/Dotstar addressable LED strip.</p>
    <div>
      <a target="_blank" href="https://learn.pimoroni.com/products/plasma-2040">view in store ⟶</a>

    </div>
  </div>

  <div id="lightbox" onclick="hideLightbox()">
    <div>
      <img />
    </div>
  </div>

  <script>
    let article = {"author": "Hel Gibbons", "channel": "Learn", "created": 1600646400, "difficulty": "Easy", "products": [["PIM510", "PIM518", "PIM519"]], "summary": "Learn how to assemble Grow and start monitoring your plants", "tags": ["Raspberry Pi", "Pi Zero"], "title": "Getting Started with Grow", "type": "Tutorial", "name": "assembling-grow", "content": "# Getting Started with Grow\n\nAutomatic, systematic and hydromatic, [Grow](https://shop.pimoroni.com/products/grow) is a smart modular monitoring system designed to help you take the best possible care of your plants. It will tell you how well they're hydra", "hero_image_filename": "hero.png", "primary_colour": "230,60,46", "word_count": 2329, "mentioned_products": [{"handle": "grow", "title": "Grow", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Grow.jpg?v=1626865483", "url": "https://shop.pimoroni.com/products/grow", "intro": "A compact Raspberry Pi powered monitoring system designed to help you take the best possible care of your plants. It will tell you how well they're hydrated, attract your attention when they need water and, if you want to go a step further, even give them water!", "variant_id": 32208365486163}, {"handle": "grow", "title": "Grow", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Grow.jpg?v=1626865483", "url": "https://shop.pimoroni.com/products/grow?variant=32208365486163", "intro": "A compact Raspberry Pi powered monitoring system designed to help you take the best possible care of your plants. It will tell you how well they're hydrated, attract your attention when they need water and, if you want to go a step further, even give them water!", "variant_id": 32208365486163, "variant_title": "Grow Kit"}, {"handle": "grow", "title": "Grow", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Grow.jpg?v=1626865483", "url": "https://shop.pimoroni.com/products/grow?variant=32208365551699", "intro": "A compact Raspberry Pi powered monitoring system designed to help you take the best possible care of your plants. It will tell you how well they're hydrated, attract your attention when they need water and, if you want to go a step further, even give them water!", "variant_id": 32208365551699, "variant_title": "Grow Chilli Kit"}, {"handle": "grow", "title": "Grow", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Grow.jpg?v=1626865483", "url": "https://shop.pimoroni.com/products/grow?variant=32208365518931", "intro": "A compact Raspberry Pi powered monitoring system designed to help you take the best possible care of your plants. It will tell you how well they're hydrated, attract your attention when they need water and, if you want to go a step further, even give them water!", "variant_id": 32208365518931, "variant_title": "Grow Herb Kit"}, {"handle": "raspberry-pi-zero-wh-with-pre-soldered-header", "title": "Raspberry Pi Zero WH (pre-soldered)", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Raspberry_Pi_Zero_WH.JPG?v=1526660203", "url": "https://shop.pimoroni.com/products/raspberry-pi-zero-wh-with-pre-soldered-header", "intro": "The Raspberry Pi Zero W takes the beloved and extremely popular Pi Zero and adds wireless LAN and Bluetooth, making it perfect for embedded Internet of Things projects.", "variant_id": 3147210031114}, {"handle": "raspberry-pi-universal-power-supply", "title": "Official Raspberry Pi Universal Power Supply (Pi 3 & Zero Only)", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Power_Supply_1_of_2.JPG?v=1596209834", "url": "https://shop.pimoroni.com/products/raspberry-pi-universal-power-supply", "intro": "This power supply will not work with the Raspberry Pi 4!", "variant_id": 48202516490}, {"handle": "brass-m2-5-standoffs-for-pi-hats-black-plated-pack-of-2", "title": "M2.5 Standoffs for Pi HATs - Black Plated - Pack of 2", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Standoffs_2_of_2.JPG?v=1539262957", "url": "https://shop.pimoroni.com/products/brass-m2-5-standoffs-for-pi-hats-black-plated-pack-of-2", "intro": "Our\u00a0standoffs\u00a0are engineered specifically to\u00a0keep your Pi HAT\u00a0or pHAT snug and supported on your Pi while also keeping the two boards separated. They're the perfect companion for any Pi HAT/pHAT combo.", "variant_id": 1211730241}, {"handle": "mini-hdmi-cable", "title": "Mini HDMI cable", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/mini_to_Std_HDMI_1.jpg?v=1555507397", "url": "https://shop.pimoroni.com/products/mini-hdmi-cable", "intro": "The officially-branded Raspberry Pi mini-HDMI to HDMI cable, perfect for\u00a0your Pi Zero or Zero W.", "variant_id": 27843894739027}, {"handle": "zero-adaptor-kit", "title": "Raspberry Pi Zero Adaptor Kit", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Zero_2_of_5_daabacb7-b187-4089-86c7-575aeafb1d0d.JPG?v=1448481941", "url": "https://shop.pimoroni.com/products/zero-adaptor-kit", "intro": "This kit comes with super handy adaptors for the mini-HDMI and micro-B USB On-The-Go ports for your new Raspberry Pi Zero!", "variant_id": 10462230279}, {"handle": "zero-adaptor-kit", "title": "Raspberry Pi Zero Adaptor Kit", "image": "https://cdn.shopify.com/s/files/1/0174/1800/products/Zero_2_of_5_daabacb7-b187-4089-86c7-575aeafb1d0d.JPG?v=1448481941", "url": "https://shop.pimoroni.com/products/zero-adaptor-kit", "intro": "This kit comes with super handy adaptors for the mini-HDMI and micro-B USB On-The-Go ports for your new Raspberry Pi Zero!", "variant_id": 10462230279}], "objectID": "assembling-grow"}

    this.highlightSection = () => {
      let headings = $("#body >h2, #body >h1").get().reverse()
      activeHeading = $(headings[headings.length - 1]).attr("id")
      $("#toc a").removeClass("active")
      for(let heading of headings) {
        if($(document).scrollTop() > ($(heading).offset().top - 100)) {
          activeHeading = $(heading).attr("id")
          break;
        }
      }

      $("#toc a[href='#" + activeHeading + "']").addClass("active")
      $("#toc a[href='#" + activeHeading + "']").css({"background-color": primaryColour })
    }

    $(document).scroll(function() {
      highlightSection()
    });



    $(() => {
      // click handler for table of contents items
      $("#toc >nav a").on("click", (e) => {
        let id = $(e.target).attr("href").substring(1)
        let heading = $("#body >h2[id='" + id + "'], #body >h1[id='" + id + "']")

        let scrollOffset = 5 * parseFloat(getComputedStyle( document.documentElement ).fontSize)
        window.scroll({top: $(heading).offset().top - scrollOffset + 1, behavior: "smooth"})

        history.replaceState(undefined, undefined, "#" + $(heading).attr("id"))

        return false // cancel default anchor behaviour
      })

      // start off with introduction section active
      if(!location.hash) {
        highlightSection("introduction")
      }

      // add class to inline product links and attached related product data
      $("#body a").each((i, e) => {
        if(e.href.startsWith("https://shop.pimoroni.com/products/")) {
          $(e).addClass("product-link")
          $(e).after("<span>🗗</span>")

          // find matching mentioned products
          for(let product of article.mentioned_products) {
            if(product.url == e.href) {
              $(e).data("product", product)
            }
          }
        }
      })

      // show lightbox when use clicks on body image
      $("#body img").click((e) => {
        showLightbox($(e.target).data("hires"))
      })

      // fetch current cart data
      $.ajax({
        url: "https://shop.pimoroni.com/cart.json",
        dataType: "jsonp",
        success: function( data ) {

        }
      })

      // hover event for inline product links, update details on popup and show popup
      $("#body a").mouseenter((e) => {
        let product = $(e.target).data("product")

        if(product) {
          $(e.target).append($("#product_popover"))
          $(e.target).addClass("active")
          $("#product_popover").addClass("visible")
          $("#product_popover h1").text(product.title)
          $("#product_popover >div:first-child").css({backgroundImage: "url('" + product.image + "')"})
          $("#product_popover p").text(product.intro)
          $("#product_popover a").attr("href", product.url)

          let bottom = $(window).height() - ($(e.target).offset().top - $(document).scrollTop()) - ($("#product_popover").height() / 2)
          let left = $(e.target).offset().left + $(e.target).width() + 15

          // clamp to bottom of view
          bottom = bottom < 10 ? 10: bottom
          // clamp to top of view
          //bottom = bottom - $("#product_popover").height() < 10 ? $("#product_popover").height() + 10: bottom
          //console.log(bottom - $("#product_popover").height())

          if((left + $("#product_popover").width()) > ($(window).width() - 10)) {
            left = $(window).width() - 10 - $("#product_popover").width()
          }

          $("#product_popover").css({bottom: bottom + "px", left: left + "px"})
        }
      })

      // hide popup event
      $("#body a").mouseleave((e) => {
        $("#body a").removeClass("active")
        $("#product_popover").removeClass("visible")
      })

      // variant selector to change image and stock status
      $("#cart select").change((e, el) => {
        // change image to selected variant
        let variantImage = $(e.target.selectedOptions[0]).data("image")
        let imageElement = $(e.target).parent().parent().find(".image")
        imageElement.css({"background-image": "url('" + variantImage + "')"})

        // update stock status
        let inStock = $(e.target.selectedOptions[0]).data("in-stock")
        let atcElement = $(e.target).parent().parent().find(">div >div.add-to-cart")
        let oosElement = $(e.target).parent().parent().find(">div >div.out-of-stock")

        if(inStock) {
          atcElement.show()
          oosElement.hide()
        }else{
          atcElement.hide()
          oosElement.show()
        }

        // set variant id on add to cart button
        let variantID = $(e.target.selectedOptions[0]).data("variant-id")
        let variantIDInput = $(e.target).parent().parent().find("input[name='id']")
        $(variantIDInput).val(variantID)
      })

    })


    const hideLightbox = () => {$("#lightbox").hide()}
    const showLightbox = (imageUrl) => {
      $("#lightbox img").attr("src", imageUrl)
      $("#lightbox").css("display", "grid")
    }

/*
    $("#cart button").click((e, el) => {
      let variantID = $(e.target).data("variant-id")
      $.post({
        url: "https://shop.pimoroni.com/cart/add.js",
        dataType: "jsonp",
        data: {id: variantID, quantity: 1},
        success: (data) => {
          console.log(data)
        },
        error: (e) => {
          console.log("fail")
          console.log(e)
        }
      })
    })*/

  </script>
</div></div>
      </div>
      <div></div>
    </main>

    <script>
      let oldURL = null
      let oldScrollPosition = null

      this.search = (term) => {
        if(term) {
          // swap to search mode and save current scroll position
          if(!oldURL) {
            oldURL = window.location.href
            oldScrollPosition = $(window).scrollTop()
            window.scroll({top: 0})
            $("#search_results").show()
            $("#content").hide()
          }

          window.history.replaceState("", "", "https://learn.pimoroni.com/search?q=" + term)

          $.get({
          url: "https://learn.pimoroni.com/search-results",
          data: {"q": term},
          success: (results) => {
              $("#search_results").html(results)
            }
          })
        }else{
          // return back to content
          if(oldURL) {
            $("#search_results").hide()
            $("#content").show()
            window.scroll({top: oldScrollPosition})
            window.history.replaceState("", "", oldURL);
            oldURL = null
          }
        }
      }

      $("#search_input").on("input", (e) => {
        search($(e.target).val())

      });

    </script>

    <script src="https://learn.pimoroni.com/static/highlight.min.js"></script>

    <script>document.addEventListener('DOMContentLoaded', (event) => {
      document.querySelectorAll('pre code').forEach((el) => {
        hljs.highlightElement(el);
      });
    });</script>
  </body>


</html>